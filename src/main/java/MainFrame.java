import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.net.URL;
import java.util.Random;

public class MainFrame extends JFrame {
    private final NoteController controller;
    private AlarmController alarmController;
    private MainMenuScreen mainMenuScreen;
    private MissionScreen missionScreen;
    private NoteEditorScreen noteEditorScreen;
    private DrawScreen drawScreen;
    private JPanel contentPanel;
    private CardLayout cardLayout;
    private ImageSpinner imageSpinner;
    private MouseEventDispatcher mouseEventDispatcher;

    public MainFrame(NoteController controllerParam) {
        System.out.println("[MainFrame Constructor] NoteController ƒë∆∞·ª£c truy·ªÅn v√†o: " + (controllerParam == null ? "NULL" : "KH√îNG NULL"));
        if (controllerParam == null) {
            System.err.println("L·ªñI NGHI√äM TR·ªåNG: MainFrame constructor nh·∫≠n m·ªôt NoteController null!");
            JOptionPane.showMessageDialog(null, "L·ªói nghi√™m tr·ªçng: Controller kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o cho MainFrame.", "L·ªói Kh·ªüi ƒê·ªông", JOptionPane.ERROR_MESSAGE);
            this.controller = null;
        } else {
            this.controller = controllerParam;
        }

        if (this.controller != null) {
            System.out.println("[MainFrame Constructor] ƒêang t·∫°o AlarmController v·ªõi controller: " + this.controller);
            this.alarmController = new AlarmController(this.controller, this);
        } else {
            System.err.println("[MainFrame Constructor] C·∫£nh b√°o: controller l√† null, AlarmController s·∫Ω kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng c√°ch.");
        }

        initializeUI();
        setupShortcuts();
        System.out.println("[MainFrame Constructor] Ho√†n t·∫•t constructor.");
    }

    private void initializeUI() {
        System.out.println("[MainFrame initializeUI] B·∫Øt ƒë·∫ßu. Controller hi·ªán t·∫°i: " + (this.controller == null ? "NULL" : "KH√îNG NULL"));
        setTitle("XiNoClo");
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                confirmAndExit();
            }
        });
        setMinimumSize(new Dimension(800, 550));
        setSize(900, 650);
        setLocationRelativeTo(null);

        JPanel topBarPanel = new JPanel(new BorderLayout(0, 0));
        JButton notesButton = new JButton("üìù Notes");
        notesButton.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 14));
        notesButton.setFocusPainted(false);
        notesButton.addActionListener(e -> showScreen("Notes"));

        JButton missionsButton = new JButton("üéØ Missions");
        missionsButton.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 14));
        missionsButton.setFocusPainted(false);
        missionsButton.addActionListener(e -> showScreen("Missions"));

        JPanel tabBarContainer = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 8));
        tabBarContainer.setBorder(BorderFactory.createEmptyBorder(5, 0, 0, 0));

        imageSpinner = new ImageSpinner(50, "/images/spinner.jpg");
        imageSpinner.setToolTipText("Rotating Indicator");
        imageSpinner.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                    HelpScreen.showDialog(MainFrame.this);
                }
            }
        });

        mouseEventDispatcher = new MouseEventDispatcher(imageSpinner, this);
        mouseEventDispatcher.addMouseMotionListener(this);

        tabBarContainer.add(notesButton);
        tabBarContainer.add(imageSpinner);
        tabBarContainer.add(missionsButton);
        topBarPanel.add(tabBarContainer, BorderLayout.CENTER);


        cardLayout = new CardLayout();
        contentPanel = new JPanel(cardLayout);

        if (this.controller != null) {
            System.out.println("[MainFrame initializeUI] ƒêang t·∫°o MainMenuScreen v·ªõi controller: " + this.controller);
            mainMenuScreen = new MainMenuScreen(this.controller, this);
            System.out.println("[MainFrame initializeUI] ƒêang t·∫°o MissionScreen v·ªõi controller: " + this.controller);
            missionScreen = new MissionScreen(this.controller, this);

            System.out.println("[MainFrame initializeUI] ƒêang t·∫°o DrawScreen v·ªõi controller: " + this.controller);
            drawScreen = new DrawScreen(this, this.controller);

            contentPanel.add(mainMenuScreen, "Notes");
            contentPanel.add(missionScreen, "Missions");
            contentPanel.add(drawScreen, "DrawScreen");

            mouseEventDispatcher.addMouseMotionListener(mainMenuScreen);
            mouseEventDispatcher.addMouseMotionListener(missionScreen);
            mouseEventDispatcher.addMouseMotionListener(drawScreen);

        } else {
            System.err.println("[MainFrame initializeUI] L·ªñI: controller l√† null, kh√¥ng th·ªÉ t·∫°o c√°c m√†n h√¨nh ch√≠nh.");
            JPanel errorPanel = new JPanel(new BorderLayout());
            errorPanel.add(new JLabel("L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ t·∫£i giao di·ªán ch√≠nh do controller b·ªã l·ªói.", SwingConstants.CENTER), BorderLayout.CENTER);
            contentPanel.add(errorPanel, "ErrorScreen");
            cardLayout.show(contentPanel, "ErrorScreen");
        }

        add(topBarPanel, BorderLayout.NORTH);
        add(contentPanel, BorderLayout.CENTER);
        applyTheme(false);

        try {
            String[] iconNames = {
                    "spinner.jpg"
            };
            Random random = new Random();
            String randomIconName = iconNames[random.nextInt(iconNames.length)];
            URL appIconUrl = getClass().getResource("/images/" + randomIconName);
            if (appIconUrl != null) {
                setIconImage(new ImageIcon(appIconUrl).getImage());
            } else {
                System.err.println("Kh√¥ng th·ªÉ t·∫£i icon ·ª©ng d·ª•ng: /images/" + randomIconName);
            }
        } catch (Exception e) {
            System.err.println("L·ªói khi t·∫£i icon ·ª©ng d·ª•ng: " + e.getMessage());
        }


        if (this.controller != null) {
            showScreen("Notes");
        }
        System.out.println("[MainFrame initializeUI] Ho√†n t·∫•t.");
    }

    private void applyTheme(boolean isDarkTheme) {
        try {
            if (isDarkTheme) {
                UIManager.setLookAndFeel(new FlatDarkLaf());
            } else {
                UIManager.setLookAndFeel(new FlatLightLaf());
            }
            SwingUtilities.updateComponentTreeUI(this);
        } catch (UnsupportedLookAndFeelException e) {
            System.err.println("[applyTheme] Error applying theme: " + e.getMessage());
        }

    }

    private void showScreen(String screenName) {
        if ("Notes".equals(screenName) && mainMenuScreen == null) {
            System.err.println("L·ªói: MainMenuScreen l√† null, kh√¥ng th·ªÉ hi·ªÉn th·ªã 'Notes'.");
            if (controller == null) cardLayout.show(contentPanel, "ErrorScreen");
            return;
        }
        if ("Missions".equals(screenName) && missionScreen == null) {
            System.err.println("L·ªói: MissionScreen l√† null, kh√¥ng th·ªÉ hi·ªÉn th·ªã 'Missions'.");
            if (controller == null) cardLayout.show(contentPanel, "ErrorScreen");
            return;
        }
        if ("DrawScreen".equals(screenName) && drawScreen == null) {
            System.err.println("L·ªói: DrawScreen l√† null, kh√¥ng th·ªÉ hi·ªÉn th·ªã 'DrawScreen'.");
            if (controller == null) cardLayout.show(contentPanel, "ErrorScreen");
            return;
        }
        if ("NoteEditor".equals(screenName) && getNoteEditorScreenInstance() == null && controller == null) {
            System.err.println("L·ªói: NoteEditorScreen kh√¥ng th·ªÉ t·∫°o do controller l√† null.");
            cardLayout.show(contentPanel, "ErrorScreen");
            return;
        }


        System.out.println("[MainFrame showScreen] Hi·ªÉn th·ªã m√†n h√¨nh: " + screenName);
        cardLayout.show(contentPanel, screenName);
        for (Component comp : contentPanel.getComponents()) {
            if (comp.isVisible() && comp instanceof JComponent) {
                ((JComponent)comp).requestFocusInWindow();
                break;
            }
        }
    }

    private NoteEditorScreen getNoteEditorScreenInstance() {
        if (this.controller == null) {
            System.err.println("L·ªñI: Kh√¥ng th·ªÉ t·∫°o NoteEditorScreen v√¨ controller l√† null.");
            return null;
        }
        boolean found = false;
        for (Component comp : contentPanel.getComponents()) {
            if (comp == noteEditorScreen) {
                found = true;
                break;
            }
        }
        if (noteEditorScreen == null || !found) {
            noteEditorScreen = new NoteEditorScreen(this, this.controller, null);
            contentPanel.add(noteEditorScreen, "NoteEditor");
        }
        return noteEditorScreen;
    }

    public void showAddNoteScreen() {
        NoteEditorScreen editor = getNoteEditorScreenInstance();
        if (editor != null) {
            editor.setNote(null);
            showScreen("NoteEditor");
        }
    }

    public void showNoteDetailScreen(Note note) {
        if (note == null || note.getNoteType() != Note.NoteType.TEXT) {
            System.err.println("L·ªói: showNoteDetailScreen ch·ªâ d√†nh cho TEXT notes.");
            if (note != null && note.getNoteType() == Note.NoteType.DRAWING) {
                showEditDrawScreen(note);
            }
            return;
        }
        NoteEditorScreen editor = getNoteEditorScreenInstance();
        if (editor != null) {
            editor.setNote(note);
            showScreen("NoteEditor");
        }
    }

    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ hi·ªÉn th·ªã m√†n h√¨nh v·∫Ω cho b·∫£n v·∫Ω m·ªõi
    public void showNewDrawScreen() {
        if (drawScreen == null) {
            if (this.controller != null) {
                drawScreen = new DrawScreen(this, this.controller);
                contentPanel.add(drawScreen, "DrawScreen");
                mouseEventDispatcher.addMouseMotionListener(drawScreen);
            } else {
                System.err.println("L·ªói: Kh√¥ng th·ªÉ t·∫°o DrawScreen v√¨ controller l√† null.");
                cardLayout.show(contentPanel, "ErrorScreen");
                return;
            }
        }
        drawScreen.setDrawingNote(null);
        showScreen("DrawScreen");
    }

    // Ph∆∞∆°ng th·ª©c m·ªõi ƒë·ªÉ hi·ªÉn th·ªã m√†n h√¨nh v·∫Ω ƒë·ªÉ ch·ªânh s·ª≠a b·∫£n v·∫Ω ƒë√£ c√≥
    public void showEditDrawScreen(Note drawingNote) {
        if (drawingNote == null || drawingNote.getNoteType() != Note.NoteType.DRAWING) {
            System.err.println("L·ªói: showEditDrawScreen ch·ªâ d√†nh cho DRAWING notes.");
            return;
        }
        if (drawScreen == null) {
            if (this.controller != null) {
                drawScreen = new DrawScreen(this, this.controller);
                contentPanel.add(drawScreen, "DrawScreen");
                mouseEventDispatcher.addMouseMotionListener(drawScreen);
            } else {
                System.err.println("L·ªói: Kh√¥ng th·ªÉ t·∫°o DrawScreen v√¨ controller l√† null.");
                cardLayout.show(contentPanel, "ErrorScreen");
                return;
            }
        }
        drawScreen.setDrawingNote(drawingNote);
        showScreen("DrawScreen");
    }


    public void showMainMenuScreen() {
        showScreen("Notes");
        if (mainMenuScreen != null) {
            mainMenuScreen.refresh();
        } else if (this.controller == null) {
            cardLayout.show(contentPanel, "ErrorScreen");
        }
    }

    public void showMissionsScreen() {
        showScreen("Missions");
        if (missionScreen != null) {
            missionScreen.refreshMissions();
        }
    }

    private void confirmAndExit() {
        System.out.println("[MainFrame confirmAndExit] B·∫Øt ƒë·∫ßu qu√° tr√¨nh tho√°t...");
        int confirm = JOptionPane.showConfirmDialog(MainFrame.this,
                "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t XiNoClo?", "X√°c Nh·∫≠n Tho√°t",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (confirm == JOptionPane.YES_OPTION) {
            if (this.alarmController != null) {
                System.out.println("[MainFrame confirmAndExit] ƒêang d·ª´ng AlarmController...");
                this.alarmController.stopSoundAndScheduler();
            }
            if (this.controller != null) {
                NoteService service = controller.getNoteService();
                if (service != null) {
                    NoteManager manager = service.getNoteManager();
                    if (manager != null) {
                        System.out.println("[MainFrame confirmAndExit] ƒêang l∆∞u d·ªØ li·ªáu cu·ªëi c√πng...");
                        manager.saveData();
                    } else {
                        System.err.println("[MainFrame confirmAndExit] L·ªói: NoteManager l√† null, kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu khi tho√°t.");
                    }
                } else {
                    System.err.println("[MainFrame confirmAndExit] L·ªói: NoteService l√† null, kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu khi tho√°t.");
                }
            } else {
                System.err.println("[MainFrame confirmAndExit] L·ªói: Controller l√† null, kh√¥ng th·ªÉ truy c·∫≠p NoteManager ƒë·ªÉ l∆∞u.");
            }
            System.out.println("[MainFrame confirmAndExit] ƒêang tho√°t ·ª©ng d·ª•ng...");
            System.exit(0);
        } else {
            System.out.println("[MainFrame confirmAndExit] Ng∆∞·ªùi d√πng ƒë√£ h·ªßy tho√°t.");
        }
    }

    private void setupShortcuts() {
        if (this.controller == null) {
            System.err.println("L·ªñI: Controller l√† null trong setupShortcuts. Ph√≠m t·∫Øt c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông.");
            return;
        }
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = getRootPane().getActionMap();

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q, KeyEvent.CTRL_DOWN_MASK), "exitApp");
        actionMap.put("exitApp", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { confirmAndExit(); }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_W, KeyEvent.CTRL_DOWN_MASK), "toggleTheme");
        actionMap.put("toggleTheme", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (controller != null) controller.changeTheme();
            }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_1, KeyEvent.CTRL_DOWN_MASK), "showNotesScreen");
        actionMap.put("showNotesScreen", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { showMainMenuScreen(); }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_2, KeyEvent.CTRL_DOWN_MASK), "showMissionsScreen");
        actionMap.put("showMissionsScreen", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { showMissionsScreen(); }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK), "addNoteGlobal");
        actionMap.put("addNoteGlobal", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { showAddNoteScreen(); }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK), "addFolderGlobal");
        actionMap.put("addFolderGlobal", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (controller == null) return;
                String name = JOptionPane.showInputDialog(MainFrame.this, "Enter folder name:");
                if (name != null && !name.trim().isEmpty()) {
                    controller.addNewFolder(name.trim());
                    if (mainMenuScreen != null && mainMenuScreen.isShowing()) {
                        mainMenuScreen.refreshFolderPanel();
                    }
                }
            }
        });

        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0), "showShortcutsDialog");
        actionMap.put("showShortcutsDialog", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                HelpScreen dialog = new HelpScreen(MainFrame.this);
                mouseEventDispatcher.addMouseMotionListenerToWindow(dialog);
                dialog.setVisible(true);
            }
        });
    }

    public void triggerThemeUpdate(boolean isNowDark) {
        applyTheme(isNowDark);
    }

    public MouseEventDispatcher getMouseEventDispatcher() {
        return mouseEventDispatcher;
    }

    public NoteController getAppController() {
        return this.controller;
    }
}
